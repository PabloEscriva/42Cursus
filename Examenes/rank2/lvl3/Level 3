1
Assignment name  : add_prime_sum
Expected files   : add_prime_sum.c
Allowed functions: write, exit
--------------------------------------------------------------------------------

Write a program that takes a positive integer as argument and displays the sum
of all prime numbers inferior or equal to it followed by a newline.

If the number of arguments is not 1, or the argument is not a positive number,
just display 0 followed by a newline.

Yes, the examples are right.

Examples:

$>./add_prime_sum 5
10
$>./add_prime_sum 7 | cat -e
17$
$>./add_prime_sum | cat -e
0$
$>



2
Assignment name  : epur_str
Expected files   : epur_str.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string, and displays this string with exactly one
space between words, with no spaces or tabs either at the beginning or the end,
followed by a \n.

A "word" is defined as a part of a string delimited either by spaces/tabs, or
by the start/end of the string.

If the number of arguments is not 1, or if there are no words to display, the
program displays \n.

Example:

$> ./epur_str "See? It's easy to print the same thing" | cat -e
See? It's easy to print the same thing$
$> ./epur_str " this        time it      will     be    more complex  . " | cat -e
this time it will be more complex .$
$> ./epur_str "No S*** Sherlock..." "nAw S*** ShErLaWQ..." | cat -e
$
$> ./epur_str "" | cat -e
$
$>

Escriba un programa que tome una cadena y muestre esta cadena con exactamente 
un espacio entre palabras, sin espacios ni tabulaciones ni al principio ni al 
final, seguido de \n.

Una "palabra" se define como parte de una cadena delimitada por espacios/
tabulaciones, o por el inicio/final de la cadena.

Si el número de argumentos no es 1, o si no hay palabras para mostrar, el
El programa muestra \n.




3
Assignment name  : expand_str
Expected files   : expand_str.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string and displays it with exactly three spaces
between each word, with no spaces or tabs either at the beginning or the end,
followed by a newline.

A word is a section of string delimited either by spaces/tabs, or by the
start/end of the string.

If the number of parameters is not 1, or if there are no words, simply display
a newline.

Examples:

$> ./expand_str "See? It's easy to print the same thing" | cat -e
See?   It's   easy   to   print   the   same   thing$
$> ./expand_str " this        time it      will     be    more complex  " | cat -e
this   time   it   will   be   more   complex$
$> ./expand_str "No S*** Sherlock..." "nAw S*** ShErLaWQ..." | cat -e
$
$> ./expand_str "" | cat -e
$
$>

Escribe un programa que tome una cadena y la muestre exactamente con tres espacios.
entre cada palabra, sin espacios ni tabulaciones ni al principio ni al final,
seguido de una nueva línea.

Una palabra es una sección de cadena delimitada por espacios/tabulaciones o por el
inicio/final de la cadena.

Si el número de parámetros no es 1, o si no hay palabras, simplemente muestre
una nueva línea.




4
Assignment name  : ft_atoi_base
Expected files   : ft_atoi_base.c
Allowed functions: None
--------------------------------------------------------------------------------

Write a function that converts the string argument str (base N <= 16)
to an integer (base 10) and returns it.

The characters recognized in the input are: 0123456789abcdef
Those are, of course, to be trimmed according to the requested base. For
example, base 4 recognizes "0123" and base 16 recognizes "0123456789abcdef".

Uppercase letters must also be recognized: "12fdb3" is the same as "12FDB3".

Minus signs ('-') are interpreted only if they are the first character of the
string.

Your function must be declared as follows:

int	ft_atoi_base(const char *str, int str_base);

--------------------------------------------------------------------------------

Escriba una función que convierta el argumento de cadena str (base N <= 16)
a un número entero (base 10) y lo devuelva.

Los caracteres reconocidos en la entrada son: 0123456789abcdef
Por supuesto, estos deben recortarse según la base solicitada.
Por ejemplo, la base 4 reconoce "0123" y la base 16 reconoce "0123456789abcdef".

También se deben reconocer las letras mayúsculas: "12fdb3" es lo mismo que "12FDB3".

Los signos menos ('-') se interpretan sólo si son el primer carácter del
cadena.

Su función debe declararse de la siguiente manera:

int	ft_atoi_base(const char *str, int str_base);



5
Assignment name  : ft_list_size
Expected files   : ft_list_size.c, ft_list.h
Allowed functions:
--------------------------------------------------------------------------------

Write a function that returns the number of elements in the linked list that's
passed to it.

It must be declared as follows:

    int	ft_list_size(t_list *begin_list);

You must use the following structure, and turn it in as a file called
ft_list.h:

    typedef struct    s_list
    {
        struct s_list *next;
        void          *data;
    }                 t_list;

Escriba una función que devuelva el número de elementos en la lista vinculada 
que se pasó a ella.

Debe declararse de la siguiente manera:

    int ft_list_size(t_list *begin_list);

Debes utilizar la siguiente estructura y entregarla como un archivo llamado
ft_list.h:

    typedef struct    s_list
    {
        struct s_list *next;
        void          *data;
    }    



6
Write the following function:

int     *ft_range(int start, int end);

It must allocate (with malloc()) an array of integers, fill it with consecutive
values that begin at start and end at end (Including start and end !), then
return a pointer to the first value of the array.

Examples:

- With (1, 3) you will return an array containing 1, 2 and 3.
- With (-1, 2) you will return an array containing -1, 0, 1 and 2.
- With (0, 0) you will return an array containing 0.
- With (0, -3) you will return an array containing 0, -1, -2 and -3.


Escribe la siguiente función:

int *ft_range(int start, int end);

Debe asignar (con malloc()) una matriz de números enteros, llenarla con valores 
consecutivos que comiencen en start y terminen en end (¡Incluyendo start y end!), 
luego devolver un puntero al primer valor de la matriz.

Ejemplos:

- Con (1, 3) devolverá una matriz que contiene 1, 2 y 3.
- Con (-1, 2) devolverá una matriz que contiene -1, 0, 1 y 2.
- Con (0, 0) devolverá una matriz que contiene 0.
- Con (0, -3) devolverá una matriz que contiene 0, -1, -2 y -3.



7
Assignment name  : ft_rrange
Expected files   : ft_rrange.c
Allowed functions: malloc
--------------------------------------------------------------------------------

Write the following function:

int     *ft_rrange(int start, int end);

It must allocate (with malloc()) an array of integers, fill it with consecutive
values that begin at end and end at start (Including start and end !), then
return a pointer to the first value of the array.

Examples:

- With (1, 3) you will return an array containing 3, 2 and 1
- With (-1, 2) you will return an array containing 2, 1, 0 and -1.
- With (0, 0) you will return an array containing 0.
- With (0, -3) you will return an array containing -3, -2, -1 and 0.


Nombre de la tarea: ft_rrange
Archivos esperados: ft_rrange.c
Funciones permitidas: malloc
--------------------------------------------------------------------------------

Escribe la siguiente función:

int *ft_rrange(int inicio, int fin);

Debe asignar (con malloc()) una matriz de números enteros, llenarla con números 
consecutivos, valores que comienzan al final y terminan al inicio (¡incluidos 
el inicio y el final!), luego devuelve un puntero al primer valor de la matriz.

Ejemplos:

- Con (1, 3) devolverás una matriz que contiene 3, 2 y 1
- Con (-1, 2) devolverás un array que contiene 2, 1, 0 y -1.
- Con (0, 0) devolverás una matriz que contiene 0.
- Con (0, -3) devolverás una matriz que contiene -3, -2, -1 y 0.



8
Assignment name  : hidenp
Expected files   : hidenp.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program named hidenp that takes two strings and displays 1
followed by a newline if the first string is hidden in the second one,
otherwise displays 0 followed by a newline.

Let s1 and s2 be strings. We say that s1 is hidden in s2 if it's possible to
find each character from s1 in s2, in the same order as they appear in s1.
Also, the empty string is hidden in any string.

If the number of parameters is not 2, the program displays a newline.

Examples :

$>./hidenp "fgex.;" "tyf34gdgf;'ektufjhgdgex.;.;rtjynur6" | cat -e
1$
$>./hidenp "abc" "2altrb53c.sse" | cat -e
1$
$>./hidenp "abc" "btarc" | cat -e
0$
$>./hidenp | cat -e
$
$>

Nombre de la tarea: hidenp
Archivos esperados: hidenp.c
Funciones permitidas: write
-------------------------------------------------- ------------------------------

Escriba un programa llamado hidenp que tome dos cadenas y muestre 1
seguido de una nueva línea si la primera cadena está oculta en la segunda,
de lo contrario muestra 0 seguido de una nueva línea.

Sean s1 y s2 cadenas. Decimos que s1 está oculto en s2 si es posible
encuentrar cada carácter de s1 en s2, en el mismo orden en que aparecen en s1.
Además, la cadena vacía está oculta en cualquier cadena.

Si el número de parámetros no es 2, el programa muestra una nueva línea.

Ejemplos:

$>./hidenp "fgex.;" "tyf34gdgf;'ektufjhgdgex.;.;rtjynur6" | cat -e
1$
$>./hidenp "abc" "2altrb53c.sse" | cat -e
1$
$>./hidenp "abc" "btarc" | cat -e
0$
$>./hidenp | cat -e
$
$>



9.
Assignment name  : lcm
Expected files   : lcm.c
Allowed functions:
--------------------------------------------------------------------------------

Write a function who takes two unsigned int as parameters and returns the
computed LCM of those parameters.

LCM (Lowest Common Multiple) of two non-zero integers is the smallest postive
integer divisible by the both integers.

A LCM can be calculated in two ways:

- You can calculate every multiples of each integers until you have a common
multiple other than 0

- You can use the HCF (Highest Common Factor) of these two integers and
calculate as follows:

	LCM(x, y) = | x * y | / HCF(x, y)

  | x * y | means "Absolute value of the product of x by y"

If at least one integer is null, LCM is equal to 0.

Your function must be prototyped as follows:

  unsigned int    lcm(unsigned int a, unsigned int b);


Nombre de la tarea: lcm
Archivos esperados: lcm.c
Funciones permitidas:
-------------------------------------------------- ------------------------------

Escriba una función que tome dos int sin signo como parámetros y devuelva el
MCM calculado de esos parámetros.

MCM (mínimo común múltiplo) de dos números enteros distintos de cero es el 
número entero positivo más pequeño divisible por ambos números enteros.

EL MCM se puede calcular de dos maneras:

- Puedes calcular todos los múltiplos de cada número entero hasta que tengas un 
común múltiplo distinto de 0

- Puedes utilizar el HCF (máximo factor común) de estos dos números enteros y
calcular de la siguiente manera:

	MCM(x, y) = | x * y | / HCF(x, y)

  | x * y | significa "Valor absoluto del producto de x por y"

Si al menos un número entero es nulo, MCM es igual a 0.

El prototipo de la función será:

  unsigned int    lcm(unsigned int a, unsigned int b);
  
  
  
  10
  Assignment name  : paramsum
Expected files   : paramsum.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that displays the number of arguments passed to it, followed by
a newline.

If there are no arguments, just display a 0 followed by a newline.

Example:

$>./paramsum 1 2 3 5 7 24
6
$>./paramsum 6 12 24 | cat -e
3$
$>./paramsum | cat -e
0$
$>

Nombre de la tarea: paramsum
Archivos esperados: paramsum.c
Funciones permitidas: write
-------------------------------------------------- ------------------------------

Escriba un programa que muestre el número de argumentos que se le pasan, seguido 
de una nueva línea.

Si no hay argumentos, simplemente muestre un 0 seguido de una nueva línea.

Ejemplo:

$>./paramsum 1 2 3 5 7 24
6
$>./paramsum 6 12 24 | gato -e
3$
$>./paramsum | gato -e
0$
$>




11
Assignment name  : pgcd
Expected files   : pgcd.c
Allowed functions: printf, atoi, malloc, free
--------------------------------------------------------------------------------

Write a program that takes two strings representing two strictly positive
integers that fit in an int.

Display their highest common denominator followed by a newline (It's always a
strictly positive integer).

If the number of parameters is not 2, display a newline.

Examples:

$> ./pgcd 42 10 | cat -e
2$
$> ./pgcd 42 12 | cat -e
6$
$> ./pgcd 14 77 | cat -e
7$
$> ./pgcd 17 3 | cat -e
1$
$> ./pgcd | cat -e
$

Nombre de la tarea: pgcd
Archivos esperados: pgcd.c
Funciones permitidas: printf, atoi, malloc, free
-------------------------------------------------- ------------------------------

Escriba un programa que tome dos cadenas que representen dos numeros positivos,
números enteros que caben en un int.

Muestra su máximo común denominador seguido de una nueva línea (siempre es un
entero positivo).

Si el número de parámetros no es 2, muestre una nueva línea.

Ejemplos:

$> ./pgcd 42 10 | gato -e
2$
$> ./pgcd 42 12 | gato -e
6$
$> ./pgcd 14 77 | gato -e
7$
$> ./pgcd 17 3 | gato -e
1$
$> ./pgcd | gato -e
$



12
Assignment name  : print_hex
Expected files   : print_hex.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a positive (or zero) number expressed in base 10,
and displays it in base 16 (lowercase letters) followed by a newline.

If the number of parameters is not 1, the program displays a newline.

Examples:

$> ./print_hex "10" | cat -e
a$
$> ./print_hex "255" | cat -e
ff$
$> ./print_hex "5156454" | cat -e
4eae66$
$> ./print_hex | cat -e
$

Nombre de la tarea: print_hex
Archivos esperados: print_hex.c
Funciones permitidas: escribir
-------------------------------------------------- ------------------------------

Escribe un programa que tome un número positivo (o cero) expresado en base 10,
y lo muestra en base 16 (letras minúsculas) seguido de una nueva línea.

Si el número de parámetros no es 1, el programa muestra una nueva línea.

Ejemplos:

$> ./print_hex "10" | gato -e
un $
$> ./print_hex "255" | gato -e
ff$
$> ./print_hex "5156454" | gato -e
4eae66$
$> ./print_hex | gato -e
$




13
Assignment name  : rstr_capitalizer
Expected files   : rstr_capitalizer.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes one or more strings and, for each argument, puts
the last character that is a letter of each word in uppercase and the rest
in lowercase, then displays the result followed by a \n.

A word is a section of string delimited by spaces/tabs or the start/end of the
string. If a word has a single letter, it must be capitalized.

A letter is a character in the set [a-zA-Z]

If there are no parameters, display \n.

Examples:

$> ./rstr_capitalizer | cat -e
$
$> ./rstr_capitalizer "a FiRSt LiTTlE TESt" | cat -e
A firsT littlE tesT$
$> ./rstr_capitalizer "SecONd teST A LITtle BiT   Moar comPLEX" "   But... This iS not THAT COMPLEX" "     Okay, this is the last 1239809147801 but not    the least    t" | cat -e
seconD tesT A littlE biT   moaR compleX$
   but... thiS iS noT thaT compleX$
     okay, thiS iS thE lasT 1239809147801 buT noT    thE leasT    T$
$>

Nombre de la tarea: rstr_capitalizer
Archivos esperados: rstr_capitalizer.c
Funciones permitidas: escribir
-------------------------------------------------- ------------------------------

Escriba un programa que tome una o más cadenas y, para cada argumento, ponga
el último carácter que es una letra de cada palabra en mayúscula y el resto
en minúsculas, luego muestra el resultado seguido de \n.

Una palabra es una sección de cadena delimitada por espacios/tabulaciones o el inicio/final de la
cadena. Si una palabra tiene una sola letra, debe escribirse en mayúscula.

Una letra es un carácter del conjunto [a-zA-Z]

Si no hay parámetros, muestra \n.

Ejemplos:

$> ./rstr_capitalizer | cat -e
$
$> ./rstr_capitalizer "a FiRSt LiTTlE TESt" | cat -e
A firsT littlE tesT$
$> ./rstr_capitalizer "SecONd teST A LITtle BiT   Moar comPLEX" "   But... This iS not THAT COMPLEX" "     Okay, this is the last 1239809147801 but not    the least    t" | cat -e
seconD tesT A littlE biT   moaR compleX$
   but... thiS iS noT thaT compleX$
     okay, thiS iS thE lasT 1239809147801 buT noT    thE leasT    T$
$>




14.
Assignment name  : str_capitalizer
Expected files   : str_capitalizer.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes one or several strings and, for each argument,
capitalizes the first character of each word (If it's a letter, obviously),
puts the rest in lowercase, and displays the result on the standard output,
followed by a \n.

A "word" is defined as a part of a string delimited either by spaces/tabs, or
by the start/end of the string. If a word only has one letter, it must be
capitalized.

If there are no arguments, the progam must display \n.

Example:

$> ./str_capitalizer | cat -e
$
$> ./str_capitalizer "a FiRSt LiTTlE TESt" | cat -e
A First Little Test$
$> ./str_capitalizer "__SecONd teST A LITtle BiT   Moar comPLEX" "   But... This iS not THAT COMPLEX" "     Okay, this is the last 1239809147801 but not    the least    t" | cat -e
__second Test A Little Bit   Moar Complex$
   But... This Is Not That Complex$
     Okay, This Is The Last 1239809147801 But Not    The Least    T$
$>

Nombre de la tarea: str_capitalizer
Archivos esperados: str_capitalizer.c
Funciones permitidas: escribir
-------------------------------------------------- ------------------------------

Escriba un programa que tome una o varias cadenas y, para cada argumento,
pone en mayúscula el primer carácter de cada palabra (si es una letra, obviamente),
pone el resto en minúsculas y muestra el resultado en la salida estándar,
seguido de \n.

Una "palabra" se define como parte de una cadena delimitada por espacios/tabulaciones, o
por el inicio/final de la cadena. Si una palabra sólo tiene una letra, debe ser
en mayúscula.

Si no hay argumentos, el programa debe mostrar \n.

Ejemplo:

$> ./str_capitalizer | cat -e
$
$> ./str_capitalizer "a FiRSt LiTTlE TESt" | cat -e
A First Little Test$
$> ./str_capitalizer "__SecONd teST A LITtle BiT   Moar comPLEX" "   But... This iS not THAT COMPLEX" "     Okay, this is the last 1239809147801 but not    the least    t" | cat -e
__second Test A Little Bit   Moar Complex$
   But... This Is Not That Complex$
     Okay, This Is The Last 1239809147801 But Not    The Least    T$
$>




15
Assignment name  : tab_mult
Expected files   : tab_mult.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that displays a number's multiplication table.

The parameter will always be a strictly positive number that fits in an int,
and said number times 9 will also fit in an int.

If there are no parameters, the program displays \n.

    Escribe un programa que muestre la tabla de multiplicar de un número.

    El parámetro siempre será un número estrictamente positivo que cabe en un int,
    y dicho número multiplicado por 9 también encajará en un int.

    Si no hay parámetros, el programa muestra \n.

Examples:

$>./tab_mult 9
1 x 9 = 9
2 x 9 = 18
3 x 9 = 27
4 x 9 = 36
5 x 9 = 45
6 x 9 = 54
7 x 9 = 63
8 x 9 = 72
9 x 9 = 81
$>./tab_mult 19
1 x 19 = 19
2 x 19 = 38
3 x 19 = 57
4 x 19 = 76
5 x 19 = 95
6 x 19 = 114
7 x 19 = 133
8 x 19 = 152
9 x 19 = 171
$>
$>./tab_mult | cat -e
$
$>



