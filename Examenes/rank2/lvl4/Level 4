1
Assignment name  : flood_fill
Expected files   : *.c, *.h
Allowed functions: -
--------------------------------------------------------------------------------

Write a function that takes a char ** as a 2-dimensional array of char, a
t_point as the dimensions of this array and a t_point as the starting point.

Starting from the given 'begin' t_point, this function fills an entire zone
by replacing characters inside with the character 'F'. A zone is an group of
the same character delimitated horizontally and vertically by other characters
or the array boundry.

The flood_fill function won't fill diagonally.

The flood_fill function will be prototyped like this:
  void  flood_fill(char **tab, t_point size, t_point begin);

The t_point structure is prototyped like this:

  typedef struct  s_point
  {
    int           x;
    int           y;
  }               t_point;

Example:

$> cat test.c
#include <stdlib.h>
#include <stdio.h>
#include "flood_fill.h"

char** make_area(char** zone, t_point size)
{
	char** new;

	new = malloc(sizeof(char*) * size.y);
	for (int i = 0; i < size.y; ++i)
	{
		new[i] = malloc(size.x + 1);
		for (int j = 0; j < size.x; ++j)
			new[i][j] = zone[i][j];
		new[i][size.x] = '\0';
	}

	return new;
}

int main(void)
{
	t_point size = {8, 5};
	char *zone[] = {
		"11111111",
		"10001001",
		"10010001",
		"10110001",
		"11100001",
	};

	char**  area = make_area(zone, size);
	for (int i = 0; i < size.y; ++i)
		printf("%s\n", area[i]);
	printf("\n");

	t_point begin = {7, 4};
	flood_fill(area, size, begin);
	for (int i = 0; i < size.y; ++i)
		printf("%s\n", area[i]);
	return (0);
}

$> gcc flood_fill.c test.c -o test; ./test
11111111
10001001
10010001
10110001
11100001

FFFFFFFF
F000F00F
F00F000F
F0FF000F
FFF0000F
$>

Nombre de la tarea: flood_fill
Archivos esperados: *.c, *.h
Funciones permitidas: -
-------------------------------------------------- ------------------------------

Escriba una función que tome un char ** como una matriz bidimensional de char, a
t_point como las dimensiones de esta matriz y t_point como punto de partida.

A partir del punto t 'comienzo' dado, esta función llena una zona completa
reemplazando los caracteres del interior con el carácter 'F'. Una zona es un grupo de
el mismo caracter delimitado horizontal y verticalmente por otros caracteres
o el límite de la matriz.

La función Flood_fill no se llenará en diagonal.

La función Flood_fill tendrá un prototipo de esta manera:
  void  flood_fill(char **tab, t_point size, t_point begin);

La estructura t_point tiene un prototipo así:

  typedef struct 	s_point
  {
    int 	x;
    int 	y;
  } 	t_point;
  
  
  
  
  2
  Escriba un programa que tome un int positivo y muestre sus factores primos en la
salida estándar, seguida de una nueva línea.

Los factores deben mostrarse en orden ascendente y separados por '*', de modo que
la expresión en la salida da el resultado correcto.

Si el número de parámetros no es 1, simplemente muestre una nueva línea.

La entrada, cuando la haya, será válida.

Ejemplos:

$> ./fprime 225225 | cat -e
3*3*5*5*7*11*13$
$> ./fprime 8333325 | cat -e
3*3*5*5*7*11*13*37$
$> ./fprime 9539 | cat -e
9539$
$> ./fprime 804577 | cat -e
804577$
$> ./fprime 42 | cat -e
2*3*7$
$> ./fprime 1 | cat -e
1$
$> ./fprime | cat -e
$
$> ./fprime 42 21 | cat -e
$



3
Nombre de la tarea: ft_itoa
Archivos esperados: ft_itoa.c
Funciones permitidas: malloc
--------------------------------------------------------------------------------

Escriba una función que tome un int y lo convierta en una cadena terminada en nulo.
La función devuelve el resultado en una matriz de caracteres que debes asignar.

Su función debe declararse de la siguiente manera:

char *ft_itoa(int nbr);



4
Nombre de la tarea: ft_list_foreach
Archivos esperados: ft_list_foreach.c, ft_list.h
Funciones permitidas:
-------------------------------------------------- ------------------------------

Escriba una función que tome una lista y un puntero de función, y aplique esta
función para cada elemento de la lista.

Debe declararse de la siguiente manera:

void ft_list_foreach(t_list *begin_list, void (*f)(void *));

La función señalada por f se utilizará de la siguiente manera:

(*f)(list_ptr->datos);

Debes utilizar la siguiente estructura y entregarla como un archivo llamado
ft_list.h:

typedef struct    s_list
{
    struct s_list *next;
    void          *data;
} t_list;




5
Nombre de la tarea: ft_list_remove_if
Archivos esperados: ft_list_remove_if.c
Funciones permitidas: gratis
-------------------------------------------------- ------------------------------

Escribe una función llamada ft_list_remove_if que elimine la lista pasaada 
cualquier elemento cuyos datos sean "iguales" a los datos de referencia.

Se declarará de la siguiente manera:

void ft_list_remove_if(t_list **begin_list, void *data_ref, int (*cmp)());

cmp toma dos void* y devuelve 0 cuando ambos parámetros son iguales.

Tienes que utilizar el archivo ft_list.h, que contendrá:

$>cat ft_list.h
typedef struct      s_list
{
    struct s_list   *next;
    void            *data;
}                   t_list;
$>




6
Nombre de la tarea: ft_split
Archivos esperados: ft_split.c
Funciones permitidas: malloc
--------------------------------------------------------------------------------

Escribe una función que tome una cadena, la divida en palabras y las devuelva como
una matriz de cadenas terminada en NULL.

Una "palabra" se define como parte de una cadena delimitada por espacios/tabulaciones/nuevo
líneas, o por el inicio/final de la cadena.

Su función debe declararse de la siguiente manera:

char **ft_split(char *cadena);




7
Assignment name  : rev_wstr
Expected files   : rev_wstr.c
Allowed functions: write, malloc, free
--------------------------------------------------------------------------------

Write a program that takes a string as a parameter, and prints its words in
reverse order.

A "word" is a part of the string bounded by spaces and/or tabs, or the
begin/end of the string.

If the number of parameters is different from 1, the program will display
'\n'.

In the parameters that are going to be tested, there won't be any "additional"
spaces (meaning that there won't be additionnal spaces at the beginning or at
the end of the string, and words will always be separated by exactly one space).

Examples:

$> ./rev_wstr "You hate people! But I love gatherings. Isn't it ironic?" | cat -e
ironic? it Isn't gatherings. love I But people! hate You$
$>./rev_wstr "abcdefghijklm"
abcdefghijklm
$> ./rev_wstr "Wingardium Leviosa" | cat -e
Leviosa Wingardium$
$> ./rev_wstr | cat -e
$
$>



8
Assignment name  : rostring
Expected files   : rostring.c
Allowed functions: write, malloc, free
--------------------------------------------------------------------------------

Write a program that takes a string and displays this string after rotating it
one word to the left.

Thus, the first word becomes the last, and others stay in the same order.

A "word" is defined as a part of a string delimited either by spaces/tabs, or
by the start/end of the string.

Words will be separated by only one space in the output.

If there's less than one argument, the program displays \n.

Example:

$>./rostring "abc   " | cat -e
abc$
$>
$>./rostring "Que la      lumiere soit et la lumiere fut"
la lumiere soit et la lumiere fut Que
$>
$>./rostring "     AkjhZ zLKIJz , 23y"
zLKIJz , 23y AkjhZ
$>
$>./rostring "first" "2" "11000000"
first
$>
$>./rostring | cat -e
$
$>



9
Nombre de la tarea: sort_int_tab
Archivos esperados: sort_int_tab.c
Funciones permitidas:
--------------------------------------------------------------------------------

Escribe la siguiente función:

void sort_int_tab(int *tab, unsigned int size);

Debe ordenar (en el lugar) la matriz int 'tab', que contiene exactamente 'tamaño'
miembros, en orden ascendente.

Hay que conservar los dobles.

Las aportaciones son siempre coherentes.



10
Escribe las siguientes funciones:

t_list *sort_list(t_list* lst, int (*cmp)(int, int));

Esta función debe ordenar la lista dada como parámetro, usando la función
puntero cmp para seleccionar el orden a aplicar y devuelve un puntero al
primer elemento de la lista ordenada.

Las duplicaciones deben permanecer.

Las entradas siempre serán consistentes.

Debes utilizar el tipo t_list descrito en el archivo list.h
que se te proporciona. Debes incluir ese archivo.
(#include "list.h"), pero no debes entregarlo. Usaremos nuestro propio
para compilar su tarea.

Las funciones pasadas como cmp siempre devolverán un valor diferente de
0 si a y b están en el orden correcto, 0 en caso contrario.

Por ejemplo, la siguiente función utilizada como cmp ordenará la lista
en orden ascendente:

int ascending(int a, int b)
{
	return (a <= b);
}